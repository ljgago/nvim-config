return {
  "folke/which-key.nvim",
  event = "VeryLazy",
  keys = {
  },
  opts = {
    preset = "helix",
    icons = {
      rules = false,
    },
    delay = function(ctx)
      return ctx.plugin and 600 or 600
    end,
    spec = {
      { "<leader>?",        function() require("which-key").show({ global = true }) end,                 desc = "Buffer Local Keymaps", },

      { "<leader><leader>", ":NvimTreeToggle<CR>",                                                       desc = "Toggle NvimTree",                  nowait = true, remap = false },

      { "<leader>b",        group = "Buffers",                                                           nowait = true,                             remap = false },
      { "<leader>bA",       ":vertical ball<CR>",                                                        desc = "Open in vertical all buffers",     nowait = true, remap = false },
      { "<leader>bD",       ":bd!<cr>",                                                                  desc = "Force delete buffer",              nowait = true, remap = false },
      { "<leader>bV",       ":vnew<CR>",                                                                 desc = "Open a vertical new empty buffer", nowait = true, remap = false },
      { "<leader>ba",       ":ball<CR>",                                                                 desc = "Open all buffers",                 nowait = true, remap = false },
      { "<leader>bb",       ":Telescope buffers<CR>",                                                    desc = "List buffers",                     nowait = true, remap = false },
      { "<leader>bd",       ":bd<cr>",                                                                   desc = "Delete buffer",                    nowait = true, remap = false },
      { "<leader>bn",       ":bn<CR>",                                                                   desc = "Next buffer",                      nowait = true, remap = false },
      { "<leader>bo",       ":new<CR>",                                                                  desc = "Open a new empty buffer",          nowait = true, remap = false },
      { "<leader>bp",       ":bp<CR>",                                                                   desc = "Previous buffer",                  nowait = true, remap = false },

      { "<leader>c",        group = "Conjure",                                                           mode = "v",                                nowait = true, remap = false },
      { "<leader>ce",       ":ConjureEval<CR>",                                                          desc = "Evaluates under cursor",           mode = "v",    nowait = true, remap = false },

      { "<leader>c",        group = "Conjure",                                                           nowait = true,                             remap = false },
      { "<leader>cb",       ":ConjureEvalBuf<CR>",                                                       desc = "Evaluates buffer",                 nowait = true, remap = false },
      { "<leader>ce",       ":ConjureEval<CR>",                                                          desc = "Evaluates under cursor",           nowait = true, remap = false },
      { "<leader>cf",       ":ConjureEvalFile<CR>",                                                      desc = "Evaluates file",                   nowait = true, remap = false },
      { "<leader>ct",       ":ConjureLogToggle<CR>",                                                     desc = "Toggle Conjure log",               nowait = true, remap = false },
      { "<leader>e",        ":lua vim.diagnostic.open_float()<CR>",                                      desc = "Diagnostics",                      nowait = true, remap = false },

      { "<leader>f",        group = "Find",                                                              nowait = true,                             remap = false },
      { "<leader>fC",       ":Telescope commands<CR>",                                                   desc = "Find commands",                    nowait = true, remap = false },
      { "<leader>fM",       ":Telescope man_pages<CR>",                                                  desc = "Man pages",                        nowait = true, remap = false },
      { "<leader>fR",       ":Telescope registers<CR>",                                                  desc = "Registers",                        nowait = true, remap = false },
      { "<leader>fb",       ":Telescope current_buffer_fuzzy_find<CR>",                                  desc = "Find current buffer",              nowait = true, remap = false },
      { "<leader>fc",       ":Telescope colorscheme<CR>",                                                desc = "Find colorscheme",                 nowait = true, remap = false },
      { "<leader>fd",       ":Telescope diagnostics<CR>",                                                desc = "Document Diagnostics",             nowait = true, remap = false },
      { "<leader>ff",       ":Telescope find_files<CR>",                                                 desc = "Find files",                       nowait = true, remap = false },
      { "<leader>fh",       ":Telescope help_tags<CR>",                                                  desc = "Find help",                        nowait = true, remap = false },
      { "<leader>fj",       ":Telescope jumplist<CR>",                                                   desc = "Jumplist",                         nowait = true, remap = false },
      { "<leader>fk",       ":Telescope keymaps<CR>",                                                    desc = "Keymaps",                          nowait = true, remap = false },
      { "<leader>fp",       ":Telescope live_grep<CR>",                                                  desc = "Find in project",                  nowait = true, remap = false },
      { "<leader>fr",       ":Telescope oldfiles<CR>",                                                   desc = "Open recent file",                 nowait = true, remap = false },
      { "<leader>fw",       ":Telescope grep_string<CR>",                                                desc = "Find word",                        nowait = true, remap = false },

      { "<leader>g",        group = "Git",                                                               nowait = true,                             remap = false },
      { "<leader>gB",       ":Git blame<CR>",                                                            desc = "Git blame",                        nowait = true, remap = false },
      { "<leader>gL",       ":Git log --oneline<CR>",                                                    desc = "Git log one line",                 nowait = true, remap = false },
      { "<leader>gb",       ":Telescope git_branches<CR>",                                               desc = "Git branches",                     nowait = true, remap = false },
      { "<leader>gc",       ":Telescope git_commits<CR>",                                                desc = "Git commits",                      nowait = true, remap = false },
      { "<leader>gd",       ":Gvdiffsplit<CR>",                                                          desc = "Git diff",                         nowait = true, remap = false },
      { "<leader>gf",       ":Telescope git_files<CR>",                                                  desc = "Git files",                        nowait = true, remap = false },
      { "<leader>gh",       ":Telescope git_stash<CR>",                                                  desc = "Git stash",                        nowait = true, remap = false },
      { "<leader>gl",       ":Git log<CR>",                                                              desc = "Git log",                          nowait = true, remap = false },
      { "<leader>gs",       ":Telescope git_status<CR>",                                                 desc = "Git status",                       nowait = true, remap = false },
      { "<leader>h",        ":nohlsearch<CR>",                                                           desc = "No Highlight",                     nowait = true, remap = false },

      { "<leader>l",        group = "LSP",                                                               nowait = true,                             remap = false },
      { "<leader>lD",       ":lua vim.lsp.buf.declaration()<CR>",                                        desc = "Go to Declaration",                nowait = true, remap = false },
      { "<leader>lI",       ":LspInstallInfo<CR>",                                                       desc = "Installer Info",                   nowait = true, remap = false },
      { "<leader>lK",       ":lua vim.lsp.buf.hover()<CR>",                                              desc = "Show Hover",                       nowait = true, remap = false },
      { "<leader>lR",       ":Telescope lsp_references<CR>",                                             desc = "List References",                  nowait = true, remap = false },
      { "<leader>lS",       ":Telescope lsp_dynamic_workspace_symbols<CR>",                              desc = "Search workspace Symbols",         nowait = true, remap = false },
      { "<leader>la",       ":lua vim.lsp.buf.code_action()<CR>",                                        desc = "List Code Action",                 nowait = true, remap = false },
      { "<leader>ld",       ":Telescope lsp_definitions<CR>",                                            desc = "Go to Definition",                 nowait = true, remap = false },
      { "<leader>le",       ":lua vim.diagnostic.open_float()<CR>",                                      desc = "Show Diagnostics",                 nowait = true, remap = false },
      { "<leader>lf",       ":lua vim.lsp.buf.format()<CR>",                                             desc = "Format",                           nowait = true, remap = false },
      { "<leader>lh",       ":lua vim.lsp.buf.signature_help()<CR>",                                     desc = "Signature help",                   nowait = true, remap = false },
      { "<leader>li",       ":Telescope lsp_implementations<CR>",                                        desc = "Go to Implementations",            nowait = true, remap = false },
      { "<leader>ln",       ":lua vim.diagnostic.goto_next()<CR>",                                       desc = "Next diagnostic",                  nowait = true, remap = false },
      { "<leader>lp",       ":lua vim.diagnostic.goto_prev()<CR>",                                       desc = "Previous diagnostic",              nowait = true, remap = false },
      { "<leader>lr",       ":lua vim.lsp.buf.rename()<CR>",                                             desc = "Rename",                           nowait = true, remap = false },
      { "<leader>ls",       ":Telescope lsp_document_symbols<CR>",                                       desc = "Search document symbols",          nowait = true, remap = false },
      { "<leader>lt",       ":lua vim.lsp.buf.type_definition()<CR>",                                    desc = "Type definition",                  nowait = true, remap = false },
      { "<leader>lw",       ":lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>",         desc = "List workspace folders",           nowait = true, remap = false },

      { "<leader>o",        group = "Open",                                                              nowait = true,                             remap = false },
      { "<leader>ot",       ":terminal<CR>",                                                             desc = "Terminal",                         nowait = true, remap = false },
      { "<leader>ou",       ":UndotreeToggle<CR>:UndotreeFocus<CR>",                                     desc = "UndoTree",                         nowait = true, remap = false },

      { "<leader>p",        group = "Packer",                                                            nowait = true,                             remap = false },
      { "<leader>pS",       ":PackerStatus<CR>",                                                         desc = "Status",                           nowait = true, remap = false },
      { "<leader>pc",       ":PackerCompile<CR>",                                                        desc = "Compile",                          nowait = true, remap = false },
      { "<leader>pi",       ":PackerInstall<CR>",                                                        desc = "Install",                          nowait = true, remap = false },
      { "<leader>ps",       ":PackerSync<CR>",                                                           desc = "Sync",                             nowait = true, remap = false },
      { "<leader>pu",       ":PackerUpdate<CR>",                                                         desc = "Update",                           nowait = true, remap = false },

      { "<leader>q",        group = "Quit",                                                              nowait = true,                             remap = false },
      { "<leader>qQ",       ":q!<CR>",                                                                   desc = "Force Quit",                       nowait = true, remap = false },
      { "<leader>qq",       ":q<CR>",                                                                    desc = "Quit",                             nowait = true, remap = false },
      { "<leader>qw",       ":wq<CR>",                                                                   desc = "Save and quit",                    nowait = true, remap = false },

      { "<leader>t",        group = "Treesitter",                                                        nowait = true,                             remap = false },
      { "<leader>ti",       ":TSConfigInfo<CR>",                                                         desc = "Info",                             nowait = true, remap = false },
      { "<leader>ts",       ":TSUpdateSync<CR>",                                                         desc = "Update Sync",                      nowait = true, remap = false },
      { "<leader>tu",       ":TSUpdate<CR>",                                                             desc = "Update",                           nowait = true, remap = false },

      { "<leader>w",        group = "Windows",                                                           nowait = true,                             remap = false },
      { "<leader>wH",       "<C-w>H",                                                                    desc = "Move to left window",              nowait = true, remap = false },
      { "<leader>wJ",       "<C-w>J",                                                                    desc = "Move to downwards window",         nowait = true, remap = false },
      { "<leader>wK",       "<C-w>K",                                                                    desc = "Move to upwards window",           nowait = true, remap = false },
      { "<leader>wL",       "<C-w>L",                                                                    desc = "Move to right window",             nowait = true, remap = false },
      { "<leader>wh",       "<C-w>h",                                                                    desc = "Left window",                      nowait = true, remap = false },
      { "<leader>wj",       "<C-w>j",                                                                    desc = "Down window",                      nowait = true, remap = false },
      { "<leader>wk",       "<C-w>k",                                                                    desc = "Up window",                        nowait = true, remap = false },
      { "<leader>wl",       "<C-w>l",                                                                    desc = "Right window",                     nowait = true, remap = false },
      { "<leader>wq",       ":q<CR>",                                                                    desc = "Close window",                     nowait = true, remap = false },
      { "<leader>ws",       ":split<CR>",                                                                desc = "Split window",                     nowait = true, remap = false },
      { "<leader>wv",       ":vsplit<CR>",                                                               desc = "Vertical split window",            nowait = true, remap = false },
      { "<leader>ww",       "<C-w><C-w>",                                                                desc = "Switch window",                    nowait = true, remap = false },
    }
  },

  -- config = function()
  --   local wk = require("which-key")
  --   local config = M.config()
  --
  --   -- wk.setup(config.setup)
  --
  --   -- local opts = config.opts
  --   -- local vopts = config.vopts
  --
  --   wk.add(config.opts.spec)
  --   -- local mappings = config.mappings
  --   -- local vmappings = config.vmappings
  --
  --   -- wk.register(mappings, opts)
  --   -- wk.register(vmappings, vopts)
  -- end,
}

-- local M = {}
-- function M.config()
--   return {
--     opts = {
--       spec = {
--         { "<leader><leader>", ":NvimTreeToggle<CR>",                                               desc = "Toggle NvimTree",                  nowait = true, remap = false },
--
--         { "<leader>b",        group = "Buffers",                                                   nowait = true,                             remap = false },
--         { "<leader>bA",       ":vertical ball<CR>",                                                desc = "Open in vertical all buffers",     nowait = true, remap = false },
--         { "<leader>bD",       ":bd!<cr>",                                                          desc = "Force delete buffer",              nowait = true, remap = false },
--         { "<leader>bV",       ":vnew<CR>",                                                         desc = "Open a vertical new empty buffer", nowait = true, remap = false },
--         { "<leader>ba",       ":ball<CR>",                                                         desc = "Open all buffers",                 nowait = true, remap = false },
--         { "<leader>bb",       ":Telescope buffers<CR>",                                            desc = "List buffers",                     nowait = true, remap = false },
--         { "<leader>bd",       ":bd<cr>",                                                           desc = "Delete buffer",                    nowait = true, remap = false },
--         { "<leader>bn",       ":bn<CR>",                                                           desc = "Next buffer",                      nowait = true, remap = false },
--         { "<leader>bo",       ":new<CR>",                                                          desc = "Open a new empty buffer",          nowait = true, remap = false },
--         { "<leader>bp",       ":bp<CR>",                                                           desc = "Previous buffer",                  nowait = true, remap = false },
--
--         { "<leader>c",        group = "Conjure",                                                   mode = "v",                                nowait = true, remap = false },
--         { "<leader>ce",       ":ConjureEval<CR>",                                                  desc = "Evaluates under cursor",           mode = "v",    nowait = true, remap = false },
--
--         { "<leader>c",        group = "Conjure",                                                   nowait = true,                             remap = false },
--         { "<leader>cb",       ":ConjureEvalBuf<CR>",                                               desc = "Evaluates buffer",                 nowait = true, remap = false },
--         { "<leader>ce",       ":ConjureEval<CR>",                                                  desc = "Evaluates under cursor",           nowait = true, remap = false },
--         { "<leader>cf",       ":ConjureEvalFile<CR>",                                              desc = "Evaluates file",                   nowait = true, remap = false },
--         { "<leader>ct",       ":ConjureLogToggle<CR>",                                             desc = "Toggle Conjure log",               nowait = true, remap = false },
--         { "<leader>e",        ":lua vim.diagnostic.open_float()<CR>",                              desc = "Diagnostics",                      nowait = true, remap = false },
--
--         { "<leader>f",        group = "Find",                                                      nowait = true,                             remap = false },
--         { "<leader>fC",       ":Telescope commands<CR>",                                           desc = "Find commands",                    nowait = true, remap = false },
--         { "<leader>fM",       ":Telescope man_pages<CR>",                                          desc = "Man pages",                        nowait = true, remap = false },
--         { "<leader>fR",       ":Telescope registers<CR>",                                          desc = "Registers",                        nowait = true, remap = false },
--         { "<leader>fb",       ":Telescope current_buffer_fuzzy_find<CR>",                          desc = "Find current buffer",              nowait = true, remap = false },
--         { "<leader>fc",       ":Telescope colorscheme<CR>",                                        desc = "Find colorscheme",                 nowait = true, remap = false },
--         { "<leader>fd",       ":Telescope diagnostics<CR>",                                        desc = "Document Diagnostics",             nowait = true, remap = false },
--         { "<leader>ff",       ":Telescope find_files<CR>",                                         desc = "Find files",                       nowait = true, remap = false },
--         { "<leader>fh",       ":Telescope help_tags<CR>",                                          desc = "Find help",                        nowait = true, remap = false },
--         { "<leader>fj",       ":Telescope jumplist<CR>",                                           desc = "Jumplist",                         nowait = true, remap = false },
--         { "<leader>fk",       ":Telescope keymaps<CR>",                                            desc = "Keymaps",                          nowait = true, remap = false },
--         { "<leader>fp",       ":Telescope live_grep<CR>",                                          desc = "Find in project",                  nowait = true, remap = false },
--         { "<leader>fr",       ":Telescope oldfiles<CR>",                                           desc = "Open recent file",                 nowait = true, remap = false },
--         { "<leader>fw",       ":Telescope grep_string<CR>",                                        desc = "Find word",                        nowait = true, remap = false },
--
--         { "<leader>g",        group = "Git",                                                       nowait = true,                             remap = false },
--         { "<leader>gB",       ":Git blame<CR>",                                                    desc = "Git blame",                        nowait = true, remap = false },
--         { "<leader>gL",       ":Git log --oneline<CR>",                                            desc = "Git log one line",                 nowait = true, remap = false },
--         { "<leader>gb",       ":Telescope git_branches<CR>",                                       desc = "Git branches",                     nowait = true, remap = false },
--         { "<leader>gc",       ":Telescope git_commits<CR>",                                        desc = "Git commits",                      nowait = true, remap = false },
--         { "<leader>gd",       ":Gvdiffsplit<CR>",                                                  desc = "Git diff",                         nowait = true, remap = false },
--         { "<leader>gf",       ":Telescope git_files<CR>",                                          desc = "Git files",                        nowait = true, remap = false },
--         { "<leader>gh",       ":Telescope git_stash<CR>",                                          desc = "Git stash",                        nowait = true, remap = false },
--         { "<leader>gl",       ":Git log<CR>",                                                      desc = "Git log",                          nowait = true, remap = false },
--         { "<leader>gs",       ":Telescope git_status<CR>",                                         desc = "Git status",                       nowait = true, remap = false },
--         { "<leader>h",        ":nohlsearch<CR>",                                                   desc = "No Highlight",                     nowait = true, remap = false },
--
--         { "<leader>l",        group = "LSP",                                                       nowait = true,                             remap = false },
--         { "<leader>lD",       ":lua vim.lsp.buf.declaration()<CR>",                                desc = "Go to Declaration",                nowait = true, remap = false },
--         { "<leader>lI",       ":LspInstallInfo<CR>",                                               desc = "Installer Info",                   nowait = true, remap = false },
--         { "<leader>lK",       ":lua vim.lsp.buf.hover()<CR>",                                      desc = "Show Hover",                       nowait = true, remap = false },
--         { "<leader>lR",       ":Telescope lsp_references<CR>",                                     desc = "List References",                  nowait = true, remap = false },
--         { "<leader>lS",       ":Telescope lsp_dynamic_workspace_symbols<CR>",                      desc = "Search workspace Symbols",         nowait = true, remap = false },
--         { "<leader>la",       ":lua vim.lsp.buf.code_action()<CR>",                                desc = "List Code Action",                 nowait = true, remap = false },
--         { "<leader>ld",       ":Telescope lsp_definitions<CR>",                                    desc = "Go to Definition",                 nowait = true, remap = false },
--         { "<leader>le",       ":lua vim.diagnostic.open_float()<CR>",                              desc = "Show Diagnostics",                 nowait = true, remap = false },
--         { "<leader>lf",       ":lua vim.lsp.buf.format()<CR>",                                     desc = "Format",                           nowait = true, remap = false },
--         { "<leader>lh",       ":lua vim.lsp.buf.signature_help()<CR>",                             desc = "Signature help",                   nowait = true, remap = false },
--         { "<leader>li",       ":Telescope lsp_implementations<CR>",                                desc = "Go to Implementations",            nowait = true, remap = false },
--         { "<leader>ln",       ":lua vim.diagnostic.goto_next()<CR>",                               desc = "Next diagnostic",                  nowait = true, remap = false },
--         { "<leader>lp",       ":lua vim.diagnostic.goto_prev()<CR>",                               desc = "Previous diagnostic",              nowait = true, remap = false },
--         { "<leader>lr",       ":lua vim.lsp.buf.rename()<CR>",                                     desc = "Rename",                           nowait = true, remap = false },
--         { "<leader>ls",       ":Telescope lsp_document_symbols<CR>",                               desc = "Search document symbols",          nowait = true, remap = false },
--         { "<leader>lt",       ":lua vim.lsp.buf.type_definition()<CR>",                            desc = "Type definition",                  nowait = true, remap = false },
--         { "<leader>lw",       ":lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", desc = "List workspace folders",           nowait = true, remap = false },
--
--         { "<leader>o",        group = "Open",                                                      nowait = true,                             remap = false },
--         { "<leader>ot",       ":terminal<CR>",                                                     desc = "Terminal",                         nowait = true, remap = false },
--         { "<leader>ou",       ":UndotreeToggle<CR>:UndotreeFocus<CR>",                             desc = "UndoTree",                         nowait = true, remap = false },
--
--         { "<leader>p",        group = "Packer",                                                    nowait = true,                             remap = false },
--         { "<leader>pS",       ":PackerStatus<CR>",                                                 desc = "Status",                           nowait = true, remap = false },
--         { "<leader>pc",       ":PackerCompile<CR>",                                                desc = "Compile",                          nowait = true, remap = false },
--         { "<leader>pi",       ":PackerInstall<CR>",                                                desc = "Install",                          nowait = true, remap = false },
--         { "<leader>ps",       ":PackerSync<CR>",                                                   desc = "Sync",                             nowait = true, remap = false },
--         { "<leader>pu",       ":PackerUpdate<CR>",                                                 desc = "Update",                           nowait = true, remap = false },
--
--         { "<leader>q",        group = "Quit",                                                      nowait = true,                             remap = false },
--         { "<leader>qQ",       ":q!<CR>",                                                           desc = "Force Quit",                       nowait = true, remap = false },
--         { "<leader>qq",       ":q<CR>",                                                            desc = "Quit",                             nowait = true, remap = false },
--         { "<leader>qw",       ":wq<CR>",                                                           desc = "Save and quit",                    nowait = true, remap = false },
--
--         { "<leader>t",        group = "Treesitter",                                                nowait = true,                             remap = false },
--         { "<leader>ti",       ":TSConfigInfo<CR>",                                                 desc = "Info",                             nowait = true, remap = false },
--         { "<leader>ts",       ":TSUpdateSync<CR>",                                                 desc = "Update Sync",                      nowait = true, remap = false },
--         { "<leader>tu",       ":TSUpdate<CR>",                                                     desc = "Update",                           nowait = true, remap = false },
--
--         { "<leader>w",        group = "Windows",                                                   nowait = true,                             remap = false },
--         { "<leader>wH",       "<C-w>H",                                                            desc = "Move to left window",              nowait = true, remap = false },
--         { "<leader>wJ",       "<C-w>J",                                                            desc = "Move to downwards window",         nowait = true, remap = false },
--         { "<leader>wK",       "<C-w>K",                                                            desc = "Move to upwards window",           nowait = true, remap = false },
--         { "<leader>wL",       "<C-w>L",                                                            desc = "Move to right window",             nowait = true, remap = false },
--         { "<leader>wh",       "<C-w>h",                                                            desc = "Left window",                      nowait = true, remap = false },
--         { "<leader>wj",       "<C-w>j",                                                            desc = "Down window",                      nowait = true, remap = false },
--         { "<leader>wk",       "<C-w>k",                                                            desc = "Up window",                        nowait = true, remap = false },
--         { "<leader>wl",       "<C-w>l",                                                            desc = "Right window",                     nowait = true, remap = false },
--         { "<leader>wq",       ":q<CR>",                                                            desc = "Close window",                     nowait = true, remap = false },
--         { "<leader>ws",       ":split<CR>",                                                        desc = "Split window",                     nowait = true, remap = false },
--         { "<leader>wv",       ":vsplit<CR>",                                                       desc = "Vertical split window",            nowait = true, remap = false },
--         { "<leader>ww",       "<C-w><C-w>",                                                        desc = "Switch window",                    nowait = true, remap = false },
--       }
--     }
--   }
-- end

-- function M.config()
--   return {
--     setup = {
--       plugins = {
--         marks = true,
--         registers = true,
--         presets = {
--           operators = false,
--           motions = false,
--           text_objects = false,
--           windows = true,
--           nav = true,
--           z = true,
--           g = true,
--         },
--         spelling = { enabled = true, suggestions = 20 },
--       },
--       keys = {
--           {
--             "<leader>?",
--             function()
--               require("which-key").show({ global = false })
--             end,
--             desc = "Buffer Local Keymaps (which-key)",
--           },
--         },
--
--
--       -- key_labels = {
--       --   ["<space>"] = "<Space>",
--       --   ["<leader>"] = "<Space>",
--       --   ["<esc>"] = "ESC",
--       -- },
--       icons = {
--         breadcrumb = "»",
--         separator = "➜",
--         group = "+",
--       },
--       window = {
--         border = "none", -- none, single, double, shadow
--         position = "bottom", -- bottom, top
--         margin = { 1, 0, 1, 0 },
--         padding = { 2, 2, 2, 2 },
--       },
--       layout = {
--         height = { min = 4, max = 25 },
--         width = { min = 20, max = 50 },
--         spacing = 3,
--         align = "left",
--       },
--       hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " },
--       show_help = true,
--     },
--
--     opts = {
--       mode = "n",
--       prefix = "<leader>",
--       buffer = nil,
--       silent = true,
--       noremap = true,
--       nowait = true,
--     },
--     vopts = {
--       mode = "v",
--       prefix = "<leader>",
--       buffer = nil,
--       silent = true,
--       noremap = true,
--       nowait = true,
--     },
--
--     -- NOTE: Prefer using : over <cmd> as the latter avoids going back in normal-mode.
--     -- see https://neovim.io/doc/user/map.html#:map-cmd
--     -- vmappings = {
--     --   c = {
--     --     name = "Conjure",
--     --     e = { ":ConjureEval<CR>", "Evaluates under cursor" },
--     --   },
--     -- },
--     spec = {
--       { "<leader><leader>", ":NvimTreeToggle<CR>", desc = "Toggle NvimTree", nowait = true, remap = false },
--
--       { "<leader>b", group = "Buffers", nowait = true, remap = false },
--       { "<leader>bA", ":vertical ball<CR>", desc = "Open in vertical all buffers", nowait = true, remap = false },
--       { "<leader>bD", ":bd!<cr>", desc = "Force delete buffer", nowait = true, remap = false },
--       { "<leader>bV", ":vnew<CR>", desc = "Open a vertical new empty buffer", nowait = true, remap = false },
--       { "<leader>ba", ":ball<CR>", desc = "Open all buffers", nowait = true, remap = false },
--       { "<leader>bb", ":Telescope buffers<CR>", desc = "List buffers", nowait = true, remap = false },
--       { "<leader>bd", ":bd<cr>", desc = "Delete buffer", nowait = true, remap = false },
--       { "<leader>bn", ":bn<CR>", desc = "Next buffer", nowait = true, remap = false },
--       { "<leader>bo", ":new<CR>", desc = "Open a new empty buffer", nowait = true, remap = false },
--       { "<leader>bp", ":bp<CR>", desc = "Previous buffer", nowait = true, remap = false },
--
--       { "<leader>c", group = "Conjure", mode = "v", nowait = true, remap = false },
--       { "<leader>ce", ":ConjureEval<CR>", desc = "Evaluates under cursor", mode = "v", nowait = true, remap = false },
--
--       { "<leader>c", group = "Conjure", nowait = true, remap = false },
--       { "<leader>cb", ":ConjureEvalBuf<CR>", desc = "Evaluates buffer", nowait = true, remap = false },
--       { "<leader>ce", ":ConjureEval<CR>", desc = "Evaluates under cursor", nowait = true, remap = false },
--       { "<leader>cf", ":ConjureEvalFile<CR>", desc = "Evaluates file", nowait = true, remap = false },
--       { "<leader>ct", ":ConjureLogToggle<CR>", desc = "Toggle Conjure log", nowait = true, remap = false },
--       { "<leader>e", ":lua vim.diagnostic.open_float()<CR>", desc = "Diagnostics", nowait = true, remap = false },
--
--       { "<leader>f", group = "Find", nowait = true, remap = false },
--       { "<leader>fC", ":Telescope commands<CR>", desc = "Find commands", nowait = true, remap = false },
--       { "<leader>fM", ":Telescope man_pages<CR>", desc = "Man pages", nowait = true, remap = false },
--       { "<leader>fR", ":Telescope registers<CR>", desc = "Registers", nowait = true, remap = false },
--       { "<leader>fb", ":Telescope current_buffer_fuzzy_find<CR>", desc = "Find current buffer", nowait = true, remap = false },
--       { "<leader>fc", ":Telescope colorscheme<CR>", desc = "Find colorscheme", nowait = true, remap = false },
--       { "<leader>fd", ":Telescope diagnostics<CR>", desc = "Document Diagnostics", nowait = true, remap = false },
--       { "<leader>ff", ":Telescope find_files<CR>", desc = "Find files", nowait = true, remap = false },
--       { "<leader>fh", ":Telescope help_tags<CR>", desc = "Find help", nowait = true, remap = false },
--       { "<leader>fj", ":Telescope jumplist<CR>", desc = "Jumplist", nowait = true, remap = false },
--       { "<leader>fk", ":Telescope keymaps<CR>", desc = "Keymaps", nowait = true, remap = false },
--       { "<leader>fp", ":Telescope live_grep<CR>", desc = "Find in project", nowait = true, remap = false },
--       { "<leader>fr", ":Telescope oldfiles<CR>", desc = "Open recent file", nowait = true, remap = false },
--       { "<leader>fw", ":Telescope grep_string<CR>", desc = "Find word", nowait = true, remap = false },
--
--       { "<leader>g", group = "Git", nowait = true, remap = false },
--       { "<leader>gB", ":Git blame<CR>", desc = "Git blame", nowait = true, remap = false },
--       { "<leader>gL", ":Git log --oneline<CR>", desc = "Git log one line", nowait = true, remap = false },
--       { "<leader>gb", ":Telescope git_branches<CR>", desc = "Git branches", nowait = true, remap = false },
--       { "<leader>gc", ":Telescope git_commits<CR>", desc = "Git commits", nowait = true, remap = false },
--       { "<leader>gd", ":Gvdiffsplit<CR>", desc = "Git diff", nowait = true, remap = false },
--       { "<leader>gf", ":Telescope git_files<CR>", desc = "Git files", nowait = true, remap = false },
--       { "<leader>gh", ":Telescope git_stash<CR>", desc = "Git stash", nowait = true, remap = false },
--       { "<leader>gl", ":Git log<CR>", desc = "Git log", nowait = true, remap = false },
--       { "<leader>gs", ":Telescope git_status<CR>", desc = "Git status", nowait = true, remap = false },
--       { "<leader>h", ":nohlsearch<CR>", desc = "No Highlight", nowait = true, remap = false },
--
--       { "<leader>l", group = "LSP", nowait = true, remap = false },
--       { "<leader>lD", ":lua vim.lsp.buf.declaration()<CR>", desc = "Go to Declaration", nowait = true, remap = false },
--       { "<leader>lI", ":LspInstallInfo<CR>", desc = "Installer Info", nowait = true, remap = false },
--       { "<leader>lK", ":lua vim.lsp.buf.hover()<CR>", desc = "Show Hover", nowait = true, remap = false },
--       { "<leader>lR", ":Telescope lsp_references<CR>", desc = "List References", nowait = true, remap = false },
--       { "<leader>lS", ":Telescope lsp_dynamic_workspace_symbols<CR>", desc = "Search workspace Symbols", nowait = true, remap = false },
--       { "<leader>la", ":lua vim.lsp.buf.code_action()<CR>", desc = "List Code Action", nowait = true, remap = false },
--       { "<leader>ld", ":Telescope lsp_definitions<CR>", desc = "Go to Definition", nowait = true, remap = false },
--       { "<leader>le", ":lua vim.diagnostic.open_float()<CR>", desc = "Show Diagnostics", nowait = true, remap = false },
--       { "<leader>lf", ":lua vim.lsp.buf.format()<CR>", desc = "Format", nowait = true, remap = false },
--       { "<leader>lh", ":lua vim.lsp.buf.signature_help()<CR>", desc = "Signature help", nowait = true, remap = false },
--       { "<leader>li", ":Telescope lsp_implementations<CR>", desc = "Go to Implementations", nowait = true, remap = false },
--       { "<leader>ln", ":lua vim.diagnostic.goto_next()<CR>", desc = "Next diagnostic", nowait = true, remap = false },
--       { "<leader>lp", ":lua vim.diagnostic.goto_prev()<CR>", desc = "Previous diagnostic", nowait = true, remap = false },
--       { "<leader>lr", ":lua vim.lsp.buf.rename()<CR>", desc = "Rename", nowait = true, remap = false },
--       { "<leader>ls", ":Telescope lsp_document_symbols<CR>", desc = "Search document symbols", nowait = true, remap = false },
--       { "<leader>lt", ":lua vim.lsp.buf.type_definition()<CR>", desc = "Type definition", nowait = true, remap = false },
--       { "<leader>lw", ":lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", desc = "List workspace folders", nowait = true, remap = false },
--
--       { "<leader>o", group = "Open", nowait = true, remap = false },
--       { "<leader>ot", ":terminal<CR>", desc = "Terminal", nowait = true, remap = false },
--       { "<leader>ou", ":UndotreeToggle<CR>:UndotreeFocus<CR>", desc = "UndoTree", nowait = true, remap = false },
--
--       { "<leader>p", group = "Packer", nowait = true, remap = false },
--       { "<leader>pS", ":PackerStatus<CR>", desc = "Status", nowait = true, remap = false },
--       { "<leader>pc", ":PackerCompile<CR>", desc = "Compile", nowait = true, remap = false },
--       { "<leader>pi", ":PackerInstall<CR>", desc = "Install", nowait = true, remap = false },
--       { "<leader>ps", ":PackerSync<CR>", desc = "Sync", nowait = true, remap = false },
--       { "<leader>pu", ":PackerUpdate<CR>", desc = "Update", nowait = true, remap = false },
--
--       { "<leader>q", group = "Quit", nowait = true, remap = false },
--       { "<leader>qQ", ":q!<CR>", desc = "Force Quit", nowait = true, remap = false },
--       { "<leader>qq", ":q<CR>", desc = "Quit", nowait = true, remap = false },
--       { "<leader>qw", ":wq<CR>", desc = "Save and quit", nowait = true, remap = false },
--
--       { "<leader>t", group = "Treesitter", nowait = true, remap = false },
--       { "<leader>ti", ":TSConfigInfo<CR>", desc = "Info", nowait = true, remap = false },
--       { "<leader>ts", ":TSUpdateSync<CR>", desc = "Update Sync", nowait = true, remap = false },
--       { "<leader>tu", ":TSUpdate<CR>", desc = "Update", nowait = true, remap = false },
--
--       { "<leader>w", group = "Windows", nowait = true, remap = false },
--       { "<leader>wH", "<C-w>H", desc = "Move to left window", nowait = true, remap = false },
--       { "<leader>wJ", "<C-w>J", desc = "Move to downwards window", nowait = true, remap = false },
--       { "<leader>wK", "<C-w>K", desc = "Move to upwards window", nowait = true, remap = false },
--       { "<leader>wL", "<C-w>L", desc = "Move to right window", nowait = true, remap = false },
--       { "<leader>wh", "<C-w>h", desc = "Left window", nowait = true, remap = false },
--       { "<leader>wj", "<C-w>j", desc = "Down window", nowait = true, remap = false },
--       { "<leader>wk", "<C-w>k", desc = "Up window", nowait = true, remap = false },
--       { "<leader>wl", "<C-w>l", desc = "Right window", nowait = true, remap = false },
--       { "<leader>wq", ":q<CR>", desc = "Close window", nowait = true, remap = false },
--       { "<leader>ws", ":split<CR>", desc = "Split window", nowait = true, remap = false },
--       { "<leader>wv", ":vsplit<CR>", desc = "Vertical split window", nowait = true, remap = false },
--       { "<leader>ww", "<C-w><C-w>", desc = "Switch window", nowait = true, remap = false },
--
--
--
--
--
--
--     --   ["<leader>"] = { ":NvimTreeToggle<CR>", "Toggle NvimTree" },
--     --   -- ["<leader>"] = { ":Neotree toggle<CR>", "Toggle NeoTree" },
--     --   ["e"] = { ":lua vim.diagnostic.open_float()<CR>", "Diagnostics" },
--     --   ["h"] = { ":nohlsearch<CR>", "No Highlight" },
--     --   b = {
--     --     name = "Buffers",
--     --     -- b = { ":FzfLua buffers<CR>", "List buffers" },
--     --     b = { ":Telescope buffers<CR>", "List buffers" },
--     --     o = { ":new<CR>", "Open a new empty buffer" },
--     --     V = { ":vnew<CR>", "Open a vertical new empty buffer" },
--     --     a = { ":ball<CR>", "Open all buffers" },
--     --     A = { ":vertical ball<CR>", "Open in vertical all buffers" },
--     --     n = { ":bn<CR>", "Next buffer" },
--     --     p = { ":bp<CR>", "Previous buffer" },
--     --     d = { ":bd<cr>", "Delete buffer" },
--     --     D = { ":bd!<cr>", "Force delete buffer" },
--     --   },
--     --   c = {
--     --     name = "Conjure",
--     --     b = { ":ConjureEvalBuf<CR>", "Evaluates buffer" },
--     --     e = { ":ConjureEval<CR>", "Evaluates under cursor" },
--     --     f = { ":ConjureEvalFile<CR>", "Evaluates file" },
--     --     t = { ":ConjureLogToggle<CR>", "Toggle Conjure log" },
--     --   },
--     --   f = {
--     --     name = "Find",
--     --     -- f = { ":FzfLua files<CR>", "Find file" },
--     --     -- b = { ":FzfLua lgrep_curbuf<CR>", "Find current buffer" },
--     --     -- l = { ":FzfLua blines<CR>", "Find current buffer lines" },
--     --     -- L = { ":FzfLua lines<CR>", "Find buffers lines" },
--     --     -- c = { ":FzfLua colorscheme<CR>", "Find colorscheme" },
--     --     -- C = { ":FzfLua commands<CR>", "Find commands" },
--     --     -- h = { ":FzfLua help_tags<CR>", "Find help" },
--     --     -- j = { ":FzfLua jumplist<CR>", "Jumplist" },
--     --     -- k = { ":FzfLua keymaps<CR>", "Keymaps" },
--     --     -- M = { ":FzfLua man_pages<CR>", "Man pages" },
--     --     -- r = { ":FzfLua oldfiles<CR>", "Open recent file" },
--     --     -- R = { ":FzfLua registers<CR>", "Registers" },
--     --     -- p = { ":FzfLua live_grep_native<CR>", "Find in project" },
--     --     -- d = { ":FzfLua lsp_document_diagnostics<CR>", "Document Diagnostics" },
--     --     -- l = { ":FzfLua blines<CR>", "Find current buffer lines" },
--     --     -- L = { ":FzfLua lines<CR>", "Find buffers lines" },
--     --     -- w = { ":FzfLua grep_cword<CR>", "Find word" },
--     --     f = { ":Telescope find_files<CR>", "Find files" },
--     --     b = { ":Telescope current_buffer_fuzzy_find<CR>", "Find current buffer" },
--     --     c = { ":Telescope colorscheme<CR>", "Find colorscheme" },
--     --     C = { ":Telescope commands<CR>", "Find commands" },
--     --     h = { ":Telescope help_tags<CR>", "Find help" },
--     --     j = { ":Telescope jumplist<CR>", "Jumplist" },
--     --     k = { ":Telescope keymaps<CR>", "Keymaps" },
--     --     M = { ":Telescope man_pages<CR>", "Man pages" },
--     --     r = { ":Telescope oldfiles<CR>", "Open recent file" },
--     --     R = { ":Telescope registers<CR>", "Registers" },
--     --     p = { ":Telescope live_grep<CR>", "Find in project" },
--     --     d = { ":Telescope diagnostics<CR>", "Document Diagnostics" },
--     --     w = { ":Telescope grep_string<CR>", "Find word" },
--     --   },
--     --   g = {
--     --     name = "Git",
--     --     b = { ":Telescope git_branches<CR>", "Git branches" },
--     --     f = { ":Telescope git_files<CR>", "Git files" },
--     --     c = { ":Telescope git_commits<CR>", "Git commits" },
--     --     s = { ":Telescope git_status<CR>", "Git status" },
--     --     h = { ":Telescope git_stash<CR>", "Git stash" },
--     --     -- b = { ":FzfLua git_branches<CR>", "Git branches" },
--     --     -- f = { ":FzfLua git_files<CR>", "Git files" },
--     --     -- c = { ":FzfLua git_commits<CR>", "Git commits" },
--     --     -- s = { ":FzfLua git_status<CR>", "Git status" },
--     --     l = { ":Git log<CR>", "Git log" },
--     --     L = { ":Git log --oneline<CR>", "Git log one line" },
--     --     B = { ":Git blame<CR>", "Git blame" },
--     --     d = { ":Gvdiffsplit<CR>", "Git diff" },
--     --     -- i = { ":lua vim.lsp.buf.implementation()<CR>", "Go to Implementation" },
--     --     -- d = { ":lua vim.lsp.buf.definition()<CR>", "Go to Definition" },
--     --     -- D = { ":lua vim.lsp.buf.declaration()<CR>", "Go to Declaration" },
--     --   },
--     --   l = {
--     --     name = "LSP",
--     --     e = { ":lua vim.diagnostic.open_float()<CR>", "Show Diagnostics" },
--     --     n = { ":lua vim.diagnostic.goto_next()<CR>", "Next diagnostic" },
--     --     p = { ":lua vim.diagnostic.goto_prev()<CR>", "Previous diagnostic" },
--     --     I = { ":LspInstallInfo<CR>", "Installer Info" },
--     --     a = { ":lua vim.lsp.buf.code_action()<CR>", "List Code Action" },
--     --     R = { ":Telescope lsp_references<CR>", "List References" },
--     --     s = { ":Telescope lsp_document_symbols<CR>", "Search document symbols" },
--     --     S = { ":Telescope lsp_dynamic_workspace_symbols<CR>", "Search workspace Symbols" },
--     --     -- a = { ":FzfLua lsp_code_actions<CR>", "List Code Action" },
--     --     -- R = { ":FzfLua lsp_references<CR>", "List References" },
--     --     -- i = { ":FzfLua lsp_implementation<CR>", "List Implementations" },
--     --     -- s = { ":FzfLua lsp_document_symbols<CR>", "Search document symbols" },
--     --     -- S = { ":FzfLua lsp_live_workspace_symbols<CR>", "Search workspace Symbols" },
--     --
--     --     d = { ":Telescope lsp_definitions<CR>", "Go to Definition" },
--     --     D = { ":lua vim.lsp.buf.declaration()<CR>", "Go to Declaration" },
--     --     i = { ":Telescope lsp_implementations<CR>", "Go to Implementations" },
--     --     f = { ":lua vim.lsp.buf.format()<CR>", "Format" },
--     --     r = { ":lua vim.lsp.buf.rename()<CR>", "Rename" },
--     --     K = { ":lua vim.lsp.buf.hover()<CR>", "Show Hover" },
--     --     h = { ":lua vim.lsp.buf.signature_help()<CR>", "Signature help" },
--     --     w = { ":lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>", "List workspace folders"},
--     --     t = { ":lua vim.lsp.buf.type_definition()<CR>", "Type definition"},
--     --   },
--     --   p = {
--     --     name = "Packer",
--     --     c = { ":PackerCompile<CR>", "Compile" },
--     --     i = { ":PackerInstall<CR>", "Install" },
--     --     s = { ":PackerSync<CR>", "Sync" },
--     --     S = { ":PackerStatus<CR>", "Status" },
--     --     u = { ":PackerUpdate<CR>", "Update" },
--     --     -- r = { ":lua require('nvim').reload()<CR>", "Reload" },
--     --   },
--     --   o = {
--     --     name = "Open",
--     --     t = { ":terminal<CR>", "Terminal" },
--     --     u = { ":UndotreeToggle<CR>:UndotreeFocus<CR>", "UndoTree" },
--     --   },
--     --   t = {
--     --     name = "Treesitter",
--     --     i = { ":TSConfigInfo<CR>", "Info" },
--     --     u = { ":TSUpdate<CR>", "Update" },
--     --     s = { ":TSUpdateSync<CR>", "Update Sync" },
--     --   },
--     --   q = {
--     --     name = "Quit",
--     --     w = { ":wq<CR>", "Save and quit" },
--     --     q = { ":q<CR>", "Quit" },
--     --     Q = { ":q!<CR>", "Force Quit" },
--     --   },
--     --   w = {
--     --     name = "Windows",
--     --     w = { "<C-w><C-w>", "Switch window" },
--     --     k = { "<C-w>k", "Up window" },
--     --     j = { "<C-w>j", "Down window" },
--     --     h = { "<C-w>h", "Left window" },
--     --     l = { "<C-w>l", "Right window" },
--     --     K = { "<C-w>K", "Move to upwards window" },
--     --     J = { "<C-w>J", "Move to downwards window" },
--     --     H = { "<C-w>H", "Move to left window" },
--     --     L = { "<C-w>L", "Move to right window" },
--     --     s = { ":split<CR>", "Split window" },
--     --     v = { ":vsplit<CR>", "Vertical split window" },
--     --     q = { ":q<CR>", "Close window" },
--     --   },
--
--     },
--   }
-- end
